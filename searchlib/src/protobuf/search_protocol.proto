// Copyright Vespa.ai. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

syntax = "proto3";

package searchlib.searchprotocol.protobuf;

option java_package = "ai.vespa.searchlib.searchprotocol.protobuf";

message SearchRequest {
    int32 offset = 1;
    int32 hits = 2;
    int32 timeout = 3; // milliseconds
    int32 trace_level = 4;
    repeated SortField sorting = 5;
    string session_key = 6;
    string document_type = 7;
    bool cache_grouping = 8;
    bool cache_query = 9;
    string rank_profile = 10;
    repeated StringProperty feature_overrides = 11;
    repeated TensorProperty tensor_feature_overrides = 12;
    repeated StringProperty rank_properties = 13;
    repeated TensorProperty tensor_rank_properties = 14;
    bytes grouping_blob = 15; // serialized opaquely like now, to be changed later
    string geo_location = 16; // to be moved into query_tree
    bytes query_tree_blob = 17; // serialized opaquely like now, to be changed later
    int32 profile_depth = 18; // new meaning: default ProfilingParams.depth
    Profiling profiling = 19;
    QueryTree query_tree = 20; // to replace blob above
}

message Profiling {
    ProfilingParams match = 1;
    ProfilingParams first_phase = 2;
    ProfilingParams second_phase = 3;
}

message ProfilingParams {
    int32 depth = 1;
}

message TensorProperty {
    string name = 1;
    bytes value = 2;
}

message StringProperty {
    string name = 1;
    repeated string values = 2;
}

message SortField {
    bool ascending = 1;
    string field = 2;
}

message SearchReply {
    int64 total_hit_count = 1;
    int64 coverage_docs = 2;
    int64 active_docs = 3;
    int64 target_active_docs = 4;
    bool degraded_by_match_phase = 5;
    bool degraded_by_soft_timeout = 6;
    repeated Hit hits = 7;
    bytes grouping_blob = 8; // serialized opaquely like now, to be changed later
    bytes slime_trace = 9;
    repeated Error errors = 10;
    repeated string match_feature_names = 11;
}

message Error {
    string message = 1;
}

message Hit {
    bytes global_id = 1;
    double relevance = 2;
    bytes sort_data = 3;
    repeated Feature match_features = 4;
}

message Feature {
    double number = 1;
    bytes tensor = 2;
}

message DocsumRequest {
    int32 timeout = 1; // milliseconds
    string session_key = 2;
    string document_type = 3;
    string summary_class = 4;
    bool cache_query = 5;
    bool dump_features = 6;
    string rank_profile = 7;
    repeated StringProperty feature_overrides = 8;
    repeated TensorProperty tensor_feature_overrides = 9;
    repeated StringProperty rank_properties = 10;
    repeated TensorProperty tensor_rank_properties = 11;
    repeated StringProperty highlight_terms = 12;
    string geo_location = 13; // to be moved into query_tree
    bytes query_tree_blob = 14; // serialized opaquely like now, to be changed later
    repeated bytes global_ids = 15;
    repeated string fields = 16;
    QueryTree query_tree = 17; // to replace blob above
}

message DocsumReply {
    bytes slime_summaries = 1; // result array inside slime object
    repeated Error errors = 2;
}

message MonitorRequest {
}

message MonitorReply {
    bool online = 1;
    int64 active_docs = 2;
    int32 distribution_key = 3;
    bool is_blocking_writes = 4;
    int64 target_active_docs = 5;
}

// to replace old query stack serialization:
message QueryTree {
    QueryTreeItem root = 1;
}

// placeholders:
message ItemTrue {
}
message ItemFalse {
}

// simple intermediate nodes:
message ItemOr {
    repeated QueryTreeItem children = 1;
}
message ItemAnd {
    repeated QueryTreeItem children = 1;
}
message ItemAndNot {
    repeated QueryTreeItem children = 1;
}
message ItemRank {
    repeated QueryTreeItem children = 1;
}
message ItemNear {
    int32 distance = 1;
    repeated QueryTreeItem children = 2;
    int32 num_negative_terms = 3;
    int32 exclusion_distance = 4;
}
message ItemOnear {
    int32 distance = 1;
    repeated QueryTreeItem children = 2;
    int32 num_negative_terms = 3;
    int32 exclusion_distance = 4;
}
message ItemWeakAnd {
    string index = 1;
    uint32 target_num_hits = 2;
    repeated QueryTreeItem children = 3;
}


// for variants of weighted sets
message PureWeightedString {
    int32 weight = 1;
    string value = 2;
}
message PureWeightedLong {
    int32 weight = 1;
    int64 value = 2;
}

// common properties for terms:
message TermItemProperties {
    string index = 1;
    optional int32 item_weight = 2;
    int32 unique_id = 3;
    bool do_not_rank = 4;
    bool do_not_use_position_data = 5;
    bool do_not_highlight = 6;
    bool is_special_token = 7;
}
// simple word-like terms:
message ItemWordTerm {
    TermItemProperties properties = 1;
    string word = 2;
}
message ItemIntegerTerm {
    TermItemProperties properties = 1;
    int64 number = 2;
}
message ItemFloatingPointTerm {
    TermItemProperties properties = 1;
    double number = 2;
}
message ItemExactStringTerm {
    TermItemProperties properties = 1;
    string word = 2;
}
message ItemPrefixTerm {
    TermItemProperties properties = 1;
    string word = 2;
}
message ItemSuffixTerm {
    TermItemProperties properties = 1;
    string word = 2;
}
message ItemSubstringTerm {
    TermItemProperties properties = 1;
    string word = 2;
}
message ItemRegexp {
    TermItemProperties properties = 1;
    string regexp = 2;
}
message ItemFuzzy {
    TermItemProperties properties = 1;
    string word = 2;
    uint32 max_edit_distance = 3;
    uint32 prefix_lock_length = 4;
    bool prefix_match = 5;
}

// numeric ranges
message ItemIntegerRangeTerm {
    TermItemProperties properties = 1;
    int64 lower_limit = 2;
    int64 upper_limit = 3;
    bool lower_inclusive = 4;
    bool upper_inclusive = 5;
    bool has_range_limit = 6;
    bool with_diversity = 7;
    bool with_diversity_cutoff = 8;
    bool diversity_cutoff_strict = 9;
    int32 range_limit = 10;
    string diversity_attribute = 11;
    uint32 diversity_max_per_group = 12;
    uint32 diversity_cutoff_groups = 13;
}
message ItemFloatingPointRangeTerm {
    TermItemProperties properties = 1;
    double lower_limit = 2;
    double upper_limit = 3;
    bool lower_inclusive = 4;
    bool upper_inclusive = 5;
    bool has_range_limit = 6;
    bool with_diversity = 7;
    bool with_diversity_cutoff = 8;
    bool diversity_cutoff_strict = 9;
    int32 range_limit = 10;
    string diversity_attribute = 11;
    uint32 diversity_max_per_group = 12;
    uint32 diversity_cutoff_groups = 13;
}

// multi-terms:
message ItemStringIn {
    TermItemProperties properties = 1;
    repeated string words = 2;
}
message ItemNumericIn {
    TermItemProperties properties = 1;
    repeated int64 numbers = 2;
}
message ItemWeightedSetOfString {
    TermItemProperties properties = 1;
    repeated PureWeightedString weighted_strings = 2;
}
message ItemWeightedSetOfLong {
    TermItemProperties properties = 1;
    repeated PureWeightedLong weighted_longs = 2;
}
message ItemDotProductOfString {
    TermItemProperties properties = 1;
    repeated PureWeightedString weighted_strings = 2;
}
message ItemDotProductOfLong {
    TermItemProperties properties = 1;
    repeated PureWeightedLong weighted_longs = 2;
}

// more complex multi-terms:
message ItemEquiv {
    TermItemProperties properties = 1;
    repeated QueryTreeItem children = 2;
}
message ItemWordAlternatives {
    TermItemProperties properties = 1;
    repeated PureWeightedString weighted_strings = 2;
}
message ItemStringWand {
    TermItemProperties properties = 1;
    uint32 target_num_hits = 2;
    double score_threshold = 3;
    double threshold_boost_factor = 4;
    repeated PureWeightedString weighted_strings = 5;
}
message ItemLongWand {
    TermItemProperties properties = 1;
    uint32 target_num_hits = 2;
    double score_threshold = 3;
    double threshold_boost_factor = 4;
    repeated PureWeightedLong weighted_longs = 5;
}

// complex intermediates:
message ItemPhrase {
    TermItemProperties properties = 1;
    repeated QueryTreeItem children = 2;
}
message ItemSameElement {
    TermItemProperties properties = 1;
    repeated QueryTreeItem children = 2;
}

// special-purpose leaf nodes:
message ItemNearestNeighbor {
    TermItemProperties properties = 1;
    string query_tensor_name = 2;
    uint32 target_num_hits = 3;
    bool allow_approximate = 4;
    uint32 explore_additional_hits = 5;
    double distance_threshold = 6;
    optional double approximate_threshold = 7;
    optional double exploration_slack = 8;
    optional double filter_first_exploration = 9;
    optional double filter_first_threshold = 10;
    optional double post_filter_threshold = 11;
    optional double target_hits_max_adjustment_factor = 12;
}
message ItemGeoLocationTerm {
    TermItemProperties properties = 1;
    bool has_geo_circle = 2;
    bool has_bounding_box = 3;
    double latitude = 4;
    double longitude = 5;
    double radius = 6;
    double s = 7;
    double w = 8;
    double n = 9;
    double e = 10;
}
message ItemPredicateQuery {
    TermItemProperties properties = 1;
    repeated PredicateFeature features = 2;
    repeated PredicateRangeFeature range_features = 3;
}
message PredicateFeature {
    string key = 1;
    string value = 2;
    uint64 sub_queries = 3;
}
message PredicateRangeFeature {
    string key = 1;
    uint64 value = 2;
    uint64 sub_queries = 4;
}

// generic item:
message QueryTreeItem {
    oneof item {
        ItemTrue item_true = 1;
        ItemFalse item_false = 2;

        ItemOr item_or = 3;
        ItemAnd item_and = 4;
        ItemAndNot item_and_not = 5;
        ItemRank item_rank = 6;
        ItemNear item_near = 7;
        ItemOnear item_onear = 8;
        ItemWeakAnd item_weak_and = 9;

        // not needed anymore: item_pure_weighted_string = 10;
        // not needed anymore: item_pure_weighted_long = 11;

        ItemWordTerm item_word_term = 12;
        ItemIntegerTerm item_integer_term = 13;
        ItemFloatingPointTerm item_floating_point_term = 14;
        ItemExactStringTerm item_exactstring_term = 15;
        ItemPrefixTerm item_prefix_term = 16;
        ItemSuffixTerm item_suffix_term = 17;
        ItemSubstringTerm item_substring_term = 18;
        ItemRegexp item_regexp = 19;
        ItemFuzzy item_fuzzy = 20;

        ItemIntegerRangeTerm item_integer_range_term = 22;
        ItemFloatingPointRangeTerm item_floating_point_range_term = 23;

        ItemStringIn item_string_in = 24;
        ItemNumericIn item_numeric_in = 25;
        ItemWeightedSetOfString item_weighted_set_of_string = 26;
        ItemWeightedSetOfLong item_weighted_set_of_long = 27;
        ItemDotProductOfString item_dot_product_of_string = 28;
        ItemDotProductOfLong item_dot_product_of_long = 29;

        ItemEquiv item_equiv = 30;
        ItemWordAlternatives item_word_alternatives = 31;
        ItemStringWand item_string_wand = 32;
        ItemLongWand item_long_wand = 33;

        ItemPhrase item_phrase = 34;
        ItemSameElement item_same_element = 35;

        ItemNearestNeighbor item_nearest_neighbor = 36;
        ItemGeoLocationTerm item_geo_location_term = 37;
        ItemPredicateQuery item_predicate_query = 38;

        // unfinished, only inside QRS: item_multi_term
        // not used anymore: item_any
    }
}
